//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KayleeParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KayleeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMERIC_LITERAL=1, STRING_LITERAL=2, BOOLEAN=3, INTEGER=4, UNSIGNED_INTEGER=5, 
		FLOAT=6, UNSIGNED_FLOAT=7, HEX_NUMBER=8, DTYPE=9, DTYPE_BIT=10, DTYPE_TINYINT=11, 
		DTYPE_INT=12, DTYPE_CHAR=13, DTYPE_TEXT=14, DTYPE_GUID=15, DTYPE_DATE=16, 
		DTYPE_ROWVERSION=17, FIELD_PARAMETER_DEFAULT_FUNCTION=18, SCHEMA=19, ENTITY=20, 
		FIELDS=21, KEYS=22, MUTATIONS=23, DEFAULT=24, PRIMARY=25, REFERENCE=26, 
		AUTO_INCREMENT=27, MAX=28, TRUE=29, FALSE=30, SCOL=31, DOT=32, OPEN_PAR=33, 
		CLOSE_PAR=34, OPEN_BLOCK=35, CLOSE_BLOCK=36, COMMA=37, ASSIGN=38, MINUS=39, 
		QUESTION_MARK=40, SCHEMA_ACCESSOR=41, ARROW=42, IDENTIFIER=43, SINGLE_LINE_COMMENT=44, 
		MULTI_LINE_COMMENT=45, WHITESPACE=46, UNEXPECTED_CHAR=47;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_schema = 2, RULE_schemaBody = 3, 
		RULE_entity = 4, RULE_entityBody = 5, RULE_fields = 6, RULE_fieldsBody = 7, 
		RULE_field = 8, RULE_fieldBody = 9, RULE_fieldParameterDefault = 10, RULE_fieldParameterDefaultValue = 11, 
		RULE_keys = 12, RULE_keysBody = 13, RULE_keyPrimary = 14, RULE_keyReference = 15, 
		RULE_mutations = 16, RULE_mutationsBody = 17, RULE_mutation = 18, RULE_qualified = 19, 
		RULE_identifierList = 20;
	public static readonly string[] ruleNames = {
		"parse", "error", "schema", "schemaBody", "entity", "entityBody", "fields", 
		"fieldsBody", "field", "fieldBody", "fieldParameterDefault", "fieldParameterDefaultValue", 
		"keys", "keysBody", "keyPrimary", "keyReference", "mutations", "mutationsBody", 
		"mutation", "qualified", "identifierList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'BIT'", "'TINYINT'", 
		null, "'CHAR'", null, "'GUID'", "'DATE'", "'ROWVERSION'", null, "'schema'", 
		"'entity'", "'fields'", "'keys'", "'mutations'", "'default'", "'primary'", 
		"'reference'", null, "'MAX'", "'true'", "'false'", "';'", "'.'", "'('", 
		"')'", "'{'", "'}'", "','", "'='", "'-'", "'?'", "'::'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMERIC_LITERAL", "STRING_LITERAL", "BOOLEAN", "INTEGER", "UNSIGNED_INTEGER", 
		"FLOAT", "UNSIGNED_FLOAT", "HEX_NUMBER", "DTYPE", "DTYPE_BIT", "DTYPE_TINYINT", 
		"DTYPE_INT", "DTYPE_CHAR", "DTYPE_TEXT", "DTYPE_GUID", "DTYPE_DATE", "DTYPE_ROWVERSION", 
		"FIELD_PARAMETER_DEFAULT_FUNCTION", "SCHEMA", "ENTITY", "FIELDS", "KEYS", 
		"MUTATIONS", "DEFAULT", "PRIMARY", "REFERENCE", "AUTO_INCREMENT", "MAX", 
		"TRUE", "FALSE", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "OPEN_BLOCK", 
		"CLOSE_BLOCK", "COMMA", "ASSIGN", "MINUS", "QUESTION_MARK", "SCHEMA_ACCESSOR", 
		"ARROW", "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KayleeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KayleeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KayleeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KayleeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KayleeParser.Eof, 0); }
		public SchemaContext[] schema() {
			return GetRuleContexts<SchemaContext>();
		}
		public SchemaContext schema(int i) {
			return GetRuleContext<SchemaContext>(i);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCHEMA || _la==UNEXPECTED_CHAR) {
				{
				State = 44;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCHEMA:
					{
					State = 42; schema();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 43; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(KayleeParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);

				throw new FormatException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null));

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(KayleeParser.SCHEMA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public SchemaBodyContext schemaBody() {
			return GetRuleContext<SchemaBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 4, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(SCHEMA);
			State = 55; Match(IDENTIFIER);
			State = 56; Match(OPEN_BLOCK);
			State = 57; schemaBody();
			State = 58; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaBodyContext : ParserRuleContext {
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SchemaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterSchemaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitSchemaBody(this);
		}
	}

	[RuleVersion(0)]
	public SchemaBodyContext schemaBody() {
		SchemaBodyContext _localctx = new SchemaBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_schemaBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENTITY) {
				{
				{
				State = 60; entity();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public ITerminalNode ENTITY() { return GetToken(KayleeParser.ENTITY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public EntityBodyContext entityBody() {
			return GetRuleContext<EntityBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 8, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(ENTITY);
			State = 67; Match(IDENTIFIER);
			State = 68; Match(OPEN_BLOCK);
			State = 69; entityBody();
			State = 70; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityBodyContext : ParserRuleContext {
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public KeysContext[] abstractasbaseboolbreakbytecasecatchcharcheckedclassconstcontinuedecimaldefaultdelegatedodoubleelseenumeventexplicitexternfalsefinallyfixedfloatforforeachgotoifimplicitinintinterfaceinternalislocklongnamespacenewnullobjectoperatoroutoverrideparamsprivateprotectedpublicreadonlyrefreturnsbytesealedshortsizeofstackallocstaticstringstructswitchthisthrowtruetrytypeofuintulonguncheckedunsafeushortusingvirtualvaluesvoidvolatilewhile() {
			return GetRuleContexts<KeysContext>();
		}
		public KeysContext abstractasbaseboolbreakbytecasecatchcharcheckedclassconstcontinuedecimaldefaultdelegatedodoubleelseenumeventexplicitexternfalsefinallyfixedfloatforforeachgotoifimplicitinintinterfaceinternalislocklongnamespacenewnullobjectoperatoroutoverrideparamsprivateprotectedpublicreadonlyrefreturnsbytesealedshortsizeofstackallocstaticstringstructswitchthisthrowtruetrytypeofuintulonguncheckedunsafeushortusingvirtualvaluesvoidvolatilewhile(int i) {
			return GetRuleContext<KeysContext>(i);
		}
		public MutationsContext[] mutations() {
			return GetRuleContexts<MutationsContext>();
		}
		public MutationsContext mutations(int i) {
			return GetRuleContext<MutationsContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public EntityBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityBody(this);
		}
	}

	[RuleVersion(0)]
	public EntityBodyContext entityBody() {
		EntityBodyContext _localctx = new EntityBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_entityBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENTITY) | (1L << FIELDS) | (1L << KEYS) | (1L << MUTATIONS))) != 0)) {
				{
				State = 76;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIELDS:
					{
					State = 72; fields();
					}
					break;
				case KEYS:
					{
					State = 73; abstractasbaseboolbreakbytecasecatchcharcheckedclassconstcontinuedecimaldefaultdelegatedodoubleelseenumeventexplicitexternfalsefinallyfixedfloatforforeachgotoifimplicitinintinterfaceinternalislocklongnamespacenewnullobjectoperatoroutoverrideparamsprivateprotectedpublicreadonlyrefreturnsbytesealedshortsizeofstackallocstaticstringstructswitchthisthrowtruetrytypeofuintulonguncheckedunsafeushortusingvirtualvaluesvoidvolatilewhile();
					}
					break;
				case MUTATIONS:
					{
					State = 74; mutations();
					}
					break;
				case ENTITY:
					{
					State = 75; entity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public ITerminalNode FIELDS() { return GetToken(KayleeParser.FIELDS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public FieldsBodyContext fieldsBody() {
			return GetRuleContext<FieldsBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 12, RULE_fields);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(FIELDS);
			State = 82; Match(OPEN_BLOCK);
			State = 83; fieldsBody();
			State = 84; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsBodyContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldsBody(this);
		}
	}

	[RuleVersion(0)]
	public FieldsBodyContext fieldsBody() {
		FieldsBodyContext _localctx = new FieldsBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 86; field();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode DTYPE() { return GetToken(KayleeParser.DTYPE, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public FieldBodyContext fieldBody() {
			return GetRuleContext<FieldBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public ITerminalNode QUESTION_MARK() { return GetToken(KayleeParser.QUESTION_MARK, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(IDENTIFIER);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION_MARK) {
				{
				State = 93; Match(QUESTION_MARK);
				}
			}

			State = 96; Match(DTYPE);
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BLOCK:
				{
				State = 97; Match(OPEN_BLOCK);
				State = 98; fieldBody();
				State = 99; Match(CLOSE_BLOCK);
				}
				break;
			case SCOL:
				{
				State = 101; Match(SCOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldBodyContext : ParserRuleContext {
		public FieldParameterDefaultContext[] fieldParameterDefault() {
			return GetRuleContexts<FieldParameterDefaultContext>();
		}
		public FieldParameterDefaultContext fieldParameterDefault(int i) {
			return GetRuleContext<FieldParameterDefaultContext>(i);
		}
		public FieldBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldBody(this);
		}
	}

	[RuleVersion(0)]
	public FieldBodyContext fieldBody() {
		FieldBodyContext _localctx = new FieldBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT) {
				{
				{
				State = 104; fieldParameterDefault();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterDefaultContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(KayleeParser.DEFAULT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(KayleeParser.ASSIGN, 0); }
		public FieldParameterDefaultValueContext fieldParameterDefaultValue() {
			return GetRuleContext<FieldParameterDefaultValueContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public FieldParameterDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterDefault(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterDefaultContext fieldParameterDefault() {
		FieldParameterDefaultContext _localctx = new FieldParameterDefaultContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldParameterDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(DEFAULT);
			State = 111; Match(ASSIGN);
			State = 112; fieldParameterDefaultValue();
			State = 113; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterDefaultValueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(KayleeParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(KayleeParser.STRING_LITERAL, 0); }
		public ITerminalNode FIELD_PARAMETER_DEFAULT_FUNCTION() { return GetToken(KayleeParser.FIELD_PARAMETER_DEFAULT_FUNCTION, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KayleeParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KayleeParser.CLOSE_PAR, 0); }
		public FieldParameterDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterDefaultValueContext fieldParameterDefaultValue() {
		FieldParameterDefaultValueContext _localctx = new FieldParameterDefaultValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldParameterDefaultValue);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMERIC_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; Match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(STRING_LITERAL);
				}
				break;
			case FIELD_PARAMETER_DEFAULT_FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; Match(FIELD_PARAMETER_DEFAULT_FUNCTION);
				State = 118; Match(OPEN_PAR);
				State = 119; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeysContext : ParserRuleContext {
		public ITerminalNode KEYS() { return GetToken(KayleeParser.KEYS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public KeysBodyContext keysBody() {
			return GetRuleContext<KeysBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public KeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keys; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitKeys(this);
		}
	}

	[RuleVersion(0)]
	public KeysContext abstractasbaseboolbreakbytecasecatchcharcheckedclassconstcontinuedecimaldefaultdelegatedodoubleelseenumeventexplicitexternfalsefinallyfixedfloatforforeachgotoifimplicitinintinterfaceinternalislocklongnamespacenewnullobjectoperatoroutoverrideparamsprivateprotectedpublicreadonlyrefreturnsbytesealedshortsizeofstackallocstaticstringstructswitchthisthrowtruetrytypeofuintulonguncheckedunsafeushortusingvirtualvaluesvoidvolatilewhile() {
		KeysContext _localctx = new KeysContext(Context, State);
		EnterRule(_localctx, 24, RULE_keys);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(KEYS);
			State = 123; Match(OPEN_BLOCK);
			State = 124; keysBody();
			State = 125; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeysBodyContext : ParserRuleContext {
		public KeyPrimaryContext[] keyPrimary() {
			return GetRuleContexts<KeyPrimaryContext>();
		}
		public KeyPrimaryContext keyPrimary(int i) {
			return GetRuleContext<KeyPrimaryContext>(i);
		}
		public KeyReferenceContext[] keyReference() {
			return GetRuleContexts<KeyReferenceContext>();
		}
		public KeyReferenceContext keyReference(int i) {
			return GetRuleContext<KeyReferenceContext>(i);
		}
		public KeysBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keysBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterKeysBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitKeysBody(this);
		}
	}

	[RuleVersion(0)]
	public KeysBodyContext keysBody() {
		KeysBodyContext _localctx = new KeysBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_keysBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PRIMARY || _la==REFERENCE) {
				{
				State = 129;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 127; keyPrimary();
					}
					break;
				case REFERENCE:
					{
					State = 128; keyReference();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPrimaryContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(KayleeParser.PRIMARY, 0); }
		public ITerminalNode ASSIGN() { return GetToken(KayleeParser.ASSIGN, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public KeyPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPrimary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterKeyPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitKeyPrimary(this);
		}
	}

	[RuleVersion(0)]
	public KeyPrimaryContext keyPrimary() {
		KeyPrimaryContext _localctx = new KeyPrimaryContext(Context, State);
		EnterRule(_localctx, 28, RULE_keyPrimary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(PRIMARY);
			State = 135; Match(ASSIGN);
			State = 136; identifierList();
			State = 137; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyReferenceContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(KayleeParser.REFERENCE, 0); }
		public ITerminalNode[] OPEN_PAR() { return GetTokens(KayleeParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(KayleeParser.OPEN_PAR, i);
		}
		public IdentifierListContext[] identifierList() {
			return GetRuleContexts<IdentifierListContext>();
		}
		public IdentifierListContext identifierList(int i) {
			return GetRuleContext<IdentifierListContext>(i);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(KayleeParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(KayleeParser.CLOSE_PAR, i);
		}
		public ITerminalNode ARROW() { return GetToken(KayleeParser.ARROW, 0); }
		public QualifiedContext qualified() {
			return GetRuleContext<QualifiedContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public KeyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterKeyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitKeyReference(this);
		}
	}

	[RuleVersion(0)]
	public KeyReferenceContext keyReference() {
		KeyReferenceContext _localctx = new KeyReferenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_keyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(REFERENCE);
			State = 140; Match(OPEN_PAR);
			State = 141; identifierList();
			State = 142; Match(CLOSE_PAR);
			State = 143; Match(ARROW);
			State = 144; qualified();
			State = 145; Match(OPEN_PAR);
			State = 146; identifierList();
			State = 147; Match(CLOSE_PAR);
			State = 148; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationsContext : ParserRuleContext {
		public ITerminalNode MUTATIONS() { return GetToken(KayleeParser.MUTATIONS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public MutationsBodyContext mutationsBody() {
			return GetRuleContext<MutationsBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public MutationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutations(this);
		}
	}

	[RuleVersion(0)]
	public MutationsContext mutations() {
		MutationsContext _localctx = new MutationsContext(Context, State);
		EnterRule(_localctx, 32, RULE_mutations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(MUTATIONS);
			State = 151; Match(OPEN_BLOCK);
			State = 152; mutationsBody();
			State = 153; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationsBodyContext : ParserRuleContext {
		public MutationContext[] mutation() {
			return GetRuleContexts<MutationContext>();
		}
		public MutationContext mutation(int i) {
			return GetRuleContext<MutationContext>(i);
		}
		public MutationsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutationsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutationsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutationsBody(this);
		}
	}

	[RuleVersion(0)]
	public MutationsBodyContext mutationsBody() {
		MutationsBodyContext _localctx = new MutationsBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_mutationsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 155; mutation();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KayleeParser.OPEN_PAR, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KayleeParser.CLOSE_PAR, 0); }
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public MutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutation(this);
		}
	}

	[RuleVersion(0)]
	public MutationContext mutation() {
		MutationContext _localctx = new MutationContext(Context, State);
		EnterRule(_localctx, 36, RULE_mutation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(IDENTIFIER);
			State = 162; Match(OPEN_PAR);
			State = 163; identifierList();
			State = 164; Match(CLOSE_PAR);
			State = 165; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KayleeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KayleeParser.IDENTIFIER, i);
		}
		public ITerminalNode SCHEMA_ACCESSOR() { return GetToken(KayleeParser.SCHEMA_ACCESSOR, 0); }
		public ITerminalNode[] DOT() { return GetTokens(KayleeParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KayleeParser.DOT, i);
		}
		public QualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterQualified(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitQualified(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedContext qualified() {
		QualifiedContext _localctx = new QualifiedContext(Context, State);
		EnterRule(_localctx, 38, RULE_qualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 167; Match(IDENTIFIER);
				State = 168; Match(SCHEMA_ACCESSOR);
				}
				break;
			}
			State = 171; Match(IDENTIFIER);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 172; Match(DOT);
				State = 173; Match(IDENTIFIER);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KayleeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KayleeParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KayleeParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KayleeParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 40, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(IDENTIFIER);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 180; Match(COMMA);
				State = 181; Match(IDENTIFIER);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\xBE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '/', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x32', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\a', '\x5', '@', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x43', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'O', '\n', '\a', '\f', '\a', '\xE', '\a', 'R', '\v', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\a', '\t', 'Z', '\n', '\t', '\f', '\t', '\xE', '\t', ']', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x61', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'i', '\n', '\n', '\x3', '\v', '\a', '\v', 'l', '\n', '\v', 
		'\f', '\v', '\xE', '\v', 'o', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '{', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x84', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x87', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\a', '\x13', '\x9F', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xA2', '\v', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xAC', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xB1', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xB4', '\v', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xB9', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\xBC', '\v', '\x16', '\x3', '\x16', '\x2', '\x2', 
		'\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', '\x2', '\x2', '\x2', '\xBB', '\x2', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x41', '\x3', '\x2', '\x2', '\x2', '\n', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', 'm', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'p', '\x3', '\x2', '\x2', '\x2', '\x18', 'z', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '|', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x88', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x8D', '\x3', '\x2', '\x2', '\x2', '\"', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xA0', '\x3', '\x2', '\x2', '\x2', '&', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xAB', '\x3', '\x2', '\x2', '\x2', '*', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', ',', '/', '\x5', '\x6', '\x4', '\x2', '-', '/', '\x5', 
		'\x4', '\x3', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\a', '\x2', '\x2', '\x3', '\x34', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x31', '\x2', 
		'\x2', '\x36', '\x37', '\b', '\x3', '\x1', '\x2', '\x37', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x15', '\x2', '\x2', '\x39', 
		':', '\a', '-', '\x2', '\x2', ':', ';', '\a', '%', '\x2', '\x2', ';', 
		'<', '\x5', '\b', '\x5', '\x2', '<', '=', '\a', '&', '\x2', '\x2', '=', 
		'\a', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '\n', '\x6', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\t', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x16', '\x2', 
		'\x2', '\x45', '\x46', '\a', '-', '\x2', '\x2', '\x46', 'G', '\a', '%', 
		'\x2', '\x2', 'G', 'H', '\x5', '\f', '\a', '\x2', 'H', 'I', '\a', '&', 
		'\x2', '\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 'J', 'O', '\x5', 
		'\xE', '\b', '\x2', 'K', 'O', '\x5', '\x1A', '\xE', '\x2', 'L', 'O', '\x5', 
		'\"', '\x12', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'P', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x17', '\x2', '\x2', 'T', 
		'U', '\a', '%', '\x2', '\x2', 'U', 'V', '\x5', '\x10', '\t', '\x2', 'V', 
		'W', '\a', '&', '\x2', '\x2', 'W', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Z', '\x5', '\x12', '\n', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x11', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '-', '\x2', 
		'\x2', '_', '\x61', '\a', '*', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', 'h', '\a', '\v', '\x2', '\x2', '\x63', '\x64', 
		'\a', '%', '\x2', '\x2', '\x64', '\x65', '\x5', '\x14', '\v', '\x2', '\x65', 
		'\x66', '\a', '&', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 
		'g', 'i', '\a', '!', '\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x5', '\x16', '\f', '\x2', 'k', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1A', 
		'\x2', '\x2', 'q', 'r', '\a', '(', '\x2', '\x2', 'r', 's', '\x5', '\x18', 
		'\r', '\x2', 's', 't', '\a', '!', '\x2', '\x2', 't', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'u', '{', '\a', '\x3', '\x2', '\x2', 'v', '{', '\a', '\x4', 
		'\x2', '\x2', 'w', 'x', '\a', '\x14', '\x2', '\x2', 'x', 'y', '\a', '#', 
		'\x2', '\x2', 'y', '{', '\a', '$', '\x2', '\x2', 'z', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', 
		'\x2', '\x2', '{', '\x19', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', 
		'\x18', '\x2', '\x2', '}', '~', '\a', '%', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\x1C', '\xF', '\x2', '\x7F', '\x80', '\a', '&', '\x2', '\x2', 
		'\x80', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x5', '\x1E', 
		'\x10', '\x2', '\x82', '\x84', '\x5', ' ', '\x11', '\x2', '\x83', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\a', '\x1B', '\x2', '\x2', '\x89', '\x8A', '\a', '(', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '*', '\x16', '\x2', '\x8B', '\x8C', 
		'\a', '!', '\x2', '\x2', '\x8C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\x1C', '\x2', '\x2', '\x8E', '\x8F', '\a', '#', '\x2', 
		'\x2', '\x8F', '\x90', '\x5', '*', '\x16', '\x2', '\x90', '\x91', '\a', 
		'$', '\x2', '\x2', '\x91', '\x92', '\a', ',', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '(', '\x15', '\x2', '\x93', '\x94', '\a', '#', '\x2', '\x2', '\x94', 
		'\x95', '\x5', '*', '\x16', '\x2', '\x95', '\x96', '\a', '$', '\x2', '\x2', 
		'\x96', '\x97', '\a', '!', '\x2', '\x2', '\x97', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\a', '\x19', '\x2', '\x2', '\x99', '\x9A', '\a', 
		'%', '\x2', '\x2', '\x9A', '\x9B', '\x5', '$', '\x13', '\x2', '\x9B', 
		'\x9C', '\a', '&', '\x2', '\x2', '\x9C', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\x5', '&', '\x14', '\x2', '\x9E', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '%', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '-', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '#', '\x2', '\x2', '\xA5', '\xA6', '\x5', '*', '\x16', '\x2', '\xA6', 
		'\xA7', '\a', '$', '\x2', '\x2', '\xA7', '\xA8', '\a', '!', '\x2', '\x2', 
		'\xA8', '\'', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '-', '\x2', 
		'\x2', '\xAA', '\xAC', '\a', '+', '\x2', '\x2', '\xAB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB2', '\a', '-', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '\"', '\x2', '\x2', '\xAF', '\xB1', '\a', 
		'-', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xBA', '\a', '-', '\x2', '\x2', '\xB6', '\xB7', '\a', '\'', '\x2', '\x2', 
		'\xB7', '\xB9', '\a', '-', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '+', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '.', '\x30', '\x41', 'N', 'P', '[', '`', 'h', 'm', 
		'z', '\x83', '\x85', '\xA0', '\xAB', '\xB2', '\xBA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
