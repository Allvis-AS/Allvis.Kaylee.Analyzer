//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KayleeParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KayleeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMERIC_LITERAL=1, STRING_LITERAL=2, BOOLEAN=3, INTEGER=4, UNSIGNED_INTEGER=5, 
		FLOAT=6, UNSIGNED_FLOAT=7, HEX_NUMBER=8, DTYPE_BIT=9, DTYPE_TINYINT=10, 
		DTYPE_INT=11, DTYPE_CHAR=12, DTYPE_TEXT=13, DTYPE_GUID=14, DTYPE_DATE=15, 
		DTYPE_ROWVERSION=16, FIELD_PARAMETER_DEFAULT_FUNCTION=17, SCHEMA=18, ENTITY=19, 
		FIELDS=20, KEYS=21, MUTATIONS=22, COMPUTED=23, DEFAULT=24, PRIMARY=25, 
		REFERENCE=26, AUTO=27, INCREMENT=28, MAX=29, TRUE=30, FALSE=31, SCOL=32, 
		DOT=33, OPEN_PAR=34, CLOSE_PAR=35, OPEN_BLOCK=36, CLOSE_BLOCK=37, COMMA=38, 
		ASSIGN=39, MINUS=40, QUESTION_MARK=41, SCHEMA_ACCESSOR=42, ARROW=43, IDENTIFIER=44, 
		SINGLE_LINE_COMMENT=45, MULTI_LINE_COMMENT=46, WHITESPACE=47, UNEXPECTED_CHAR=48;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_schema = 2, RULE_schemaBody = 3, 
		RULE_entity = 4, RULE_entityBody = 5, RULE_fields = 6, RULE_fieldsBody = 7, 
		RULE_field = 8, RULE_fieldBody = 9, RULE_fieldParameterComputed = 10, 
		RULE_fieldParameterComputedValue = 11, RULE_fieldParameterDefault = 12, 
		RULE_fieldParameterDefaultValue = 13, RULE_entityKeys = 14, RULE_entityKeysBody = 15, 
		RULE_entityKeyPrimary = 16, RULE_entityKeyReference = 17, RULE_mutations = 18, 
		RULE_mutationsBody = 19, RULE_mutation = 20, RULE_qualified = 21, RULE_identifierList = 22, 
		RULE_dtype = 23, RULE_dtypeIntAutoIncrement = 24, RULE_dtypeTextSize = 25;
	public static readonly string[] ruleNames = {
		"parse", "error", "schema", "schemaBody", "entity", "entityBody", "fields", 
		"fieldsBody", "field", "fieldBody", "fieldParameterComputed", "fieldParameterComputedValue", 
		"fieldParameterDefault", "fieldParameterDefaultValue", "entityKeys", "entityKeysBody", 
		"entityKeyPrimary", "entityKeyReference", "mutations", "mutationsBody", 
		"mutation", "qualified", "identifierList", "dtype", "dtypeIntAutoIncrement", 
		"dtypeTextSize"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'BIT'", "'TINYINT'", 
		"'INT'", "'CHAR'", "'TEXT'", "'GUID'", "'DATE'", "'ROWVERSION'", null, 
		"'schema'", "'entity'", "'fields'", "'keys'", "'mutations'", "'computed'", 
		"'default'", "'primary'", "'reference'", "'AUTO'", "'INCREMENT'", "'MAX'", 
		"'true'", "'false'", "';'", "'.'", "'('", "')'", "'{'", "'}'", "','", 
		"'='", "'-'", "'?'", "'::'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMERIC_LITERAL", "STRING_LITERAL", "BOOLEAN", "INTEGER", "UNSIGNED_INTEGER", 
		"FLOAT", "UNSIGNED_FLOAT", "HEX_NUMBER", "DTYPE_BIT", "DTYPE_TINYINT", 
		"DTYPE_INT", "DTYPE_CHAR", "DTYPE_TEXT", "DTYPE_GUID", "DTYPE_DATE", "DTYPE_ROWVERSION", 
		"FIELD_PARAMETER_DEFAULT_FUNCTION", "SCHEMA", "ENTITY", "FIELDS", "KEYS", 
		"MUTATIONS", "COMPUTED", "DEFAULT", "PRIMARY", "REFERENCE", "AUTO", "INCREMENT", 
		"MAX", "TRUE", "FALSE", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "OPEN_BLOCK", 
		"CLOSE_BLOCK", "COMMA", "ASSIGN", "MINUS", "QUESTION_MARK", "SCHEMA_ACCESSOR", 
		"ARROW", "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITESPACE", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KayleeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KayleeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KayleeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KayleeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KayleeParser.Eof, 0); }
		public SchemaContext[] schema() {
			return GetRuleContexts<SchemaContext>();
		}
		public SchemaContext schema(int i) {
			return GetRuleContext<SchemaContext>(i);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCHEMA || _la==UNEXPECTED_CHAR) {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCHEMA:
					{
					State = 52; schema();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 53; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(KayleeParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);

				throw new FormatException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null));

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		public ITerminalNode SCHEMA() { return GetToken(KayleeParser.SCHEMA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public SchemaBodyContext schemaBody() {
			return GetRuleContext<SchemaBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 4, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(SCHEMA);
			State = 65; Match(IDENTIFIER);
			State = 66; Match(OPEN_BLOCK);
			State = 67; schemaBody();
			State = 68; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaBodyContext : ParserRuleContext {
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SchemaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterSchemaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitSchemaBody(this);
		}
	}

	[RuleVersion(0)]
	public SchemaBodyContext schemaBody() {
		SchemaBodyContext _localctx = new SchemaBodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_schemaBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENTITY) {
				{
				{
				State = 70; entity();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public ITerminalNode ENTITY() { return GetToken(KayleeParser.ENTITY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public EntityBodyContext entityBody() {
			return GetRuleContext<EntityBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 8, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(ENTITY);
			State = 77; Match(IDENTIFIER);
			State = 78; Match(OPEN_BLOCK);
			State = 79; entityBody();
			State = 80; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityBodyContext : ParserRuleContext {
		public FieldsContext[] fields() {
			return GetRuleContexts<FieldsContext>();
		}
		public FieldsContext fields(int i) {
			return GetRuleContext<FieldsContext>(i);
		}
		public EntityKeysContext[] entityKeys() {
			return GetRuleContexts<EntityKeysContext>();
		}
		public EntityKeysContext entityKeys(int i) {
			return GetRuleContext<EntityKeysContext>(i);
		}
		public MutationsContext[] mutations() {
			return GetRuleContexts<MutationsContext>();
		}
		public MutationsContext mutations(int i) {
			return GetRuleContext<MutationsContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public EntityBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityBody(this);
		}
	}

	[RuleVersion(0)]
	public EntityBodyContext entityBody() {
		EntityBodyContext _localctx = new EntityBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_entityBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENTITY) | (1L << FIELDS) | (1L << KEYS) | (1L << MUTATIONS))) != 0)) {
				{
				State = 86;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIELDS:
					{
					State = 82; fields();
					}
					break;
				case KEYS:
					{
					State = 83; entityKeys();
					}
					break;
				case MUTATIONS:
					{
					State = 84; mutations();
					}
					break;
				case ENTITY:
					{
					State = 85; entity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public ITerminalNode FIELDS() { return GetToken(KayleeParser.FIELDS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public FieldsBodyContext fieldsBody() {
			return GetRuleContext<FieldsBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 12, RULE_fields);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(FIELDS);
			State = 92; Match(OPEN_BLOCK);
			State = 93; fieldsBody();
			State = 94; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsBodyContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldsBody(this);
		}
	}

	[RuleVersion(0)]
	public FieldsBodyContext fieldsBody() {
		FieldsBodyContext _localctx = new FieldsBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 96; field();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public DtypeContext dtype() {
			return GetRuleContext<DtypeContext>(0);
		}
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public FieldBodyContext fieldBody() {
			return GetRuleContext<FieldBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public ITerminalNode QUESTION_MARK() { return GetToken(KayleeParser.QUESTION_MARK, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 16, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(IDENTIFIER);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION_MARK) {
				{
				State = 103; Match(QUESTION_MARK);
				}
			}

			State = 106; dtype();
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BLOCK:
				{
				State = 107; Match(OPEN_BLOCK);
				State = 108; fieldBody();
				State = 109; Match(CLOSE_BLOCK);
				}
				break;
			case SCOL:
				{
				State = 111; Match(SCOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldBodyContext : ParserRuleContext {
		public FieldParameterComputedContext[] fieldParameterComputed() {
			return GetRuleContexts<FieldParameterComputedContext>();
		}
		public FieldParameterComputedContext fieldParameterComputed(int i) {
			return GetRuleContext<FieldParameterComputedContext>(i);
		}
		public FieldParameterDefaultContext[] fieldParameterDefault() {
			return GetRuleContexts<FieldParameterDefaultContext>();
		}
		public FieldParameterDefaultContext fieldParameterDefault(int i) {
			return GetRuleContext<FieldParameterDefaultContext>(i);
		}
		public FieldBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldBody(this);
		}
	}

	[RuleVersion(0)]
	public FieldBodyContext fieldBody() {
		FieldBodyContext _localctx = new FieldBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMPUTED || _la==DEFAULT) {
				{
				State = 116;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMPUTED:
					{
					State = 114; fieldParameterComputed();
					}
					break;
				case DEFAULT:
					{
					State = 115; fieldParameterDefault();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterComputedContext : ParserRuleContext {
		public ITerminalNode COMPUTED() { return GetToken(KayleeParser.COMPUTED, 0); }
		public ITerminalNode ASSIGN() { return GetToken(KayleeParser.ASSIGN, 0); }
		public FieldParameterComputedValueContext fieldParameterComputedValue() {
			return GetRuleContext<FieldParameterComputedValueContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public FieldParameterComputedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterComputed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterComputed(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterComputed(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterComputedContext fieldParameterComputed() {
		FieldParameterComputedContext _localctx = new FieldParameterComputedContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldParameterComputed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(COMPUTED);
			State = 122; Match(ASSIGN);
			State = 123; fieldParameterComputedValue();
			State = 124; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterComputedValueContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(KayleeParser.BOOLEAN, 0); }
		public FieldParameterComputedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterComputedValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterComputedValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterComputedValue(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterComputedValueContext fieldParameterComputedValue() {
		FieldParameterComputedValueContext _localctx = new FieldParameterComputedValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_fieldParameterComputedValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterDefaultContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(KayleeParser.DEFAULT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(KayleeParser.ASSIGN, 0); }
		public FieldParameterDefaultValueContext fieldParameterDefaultValue() {
			return GetRuleContext<FieldParameterDefaultValueContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public FieldParameterDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterDefault(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterDefaultContext fieldParameterDefault() {
		FieldParameterDefaultContext _localctx = new FieldParameterDefaultContext(Context, State);
		EnterRule(_localctx, 24, RULE_fieldParameterDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(DEFAULT);
			State = 129; Match(ASSIGN);
			State = 130; fieldParameterDefaultValue();
			State = 131; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldParameterDefaultValueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(KayleeParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(KayleeParser.STRING_LITERAL, 0); }
		public ITerminalNode FIELD_PARAMETER_DEFAULT_FUNCTION() { return GetToken(KayleeParser.FIELD_PARAMETER_DEFAULT_FUNCTION, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KayleeParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KayleeParser.CLOSE_PAR, 0); }
		public FieldParameterDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldParameterDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterFieldParameterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitFieldParameterDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public FieldParameterDefaultValueContext fieldParameterDefaultValue() {
		FieldParameterDefaultValueContext _localctx = new FieldParameterDefaultValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_fieldParameterDefaultValue);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMERIC_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(NUMERIC_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; Match(STRING_LITERAL);
				}
				break;
			case FIELD_PARAMETER_DEFAULT_FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135; Match(FIELD_PARAMETER_DEFAULT_FUNCTION);
				State = 136; Match(OPEN_PAR);
				State = 137; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityKeysContext : ParserRuleContext {
		public ITerminalNode KEYS() { return GetToken(KayleeParser.KEYS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public EntityKeysBodyContext entityKeysBody() {
			return GetRuleContext<EntityKeysBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public EntityKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityKeys; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityKeys(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityKeys(this);
		}
	}

	[RuleVersion(0)]
	public EntityKeysContext entityKeys() {
		EntityKeysContext _localctx = new EntityKeysContext(Context, State);
		EnterRule(_localctx, 28, RULE_entityKeys);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(KEYS);
			State = 141; Match(OPEN_BLOCK);
			State = 142; entityKeysBody();
			State = 143; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityKeysBodyContext : ParserRuleContext {
		public EntityKeyPrimaryContext[] entityKeyPrimary() {
			return GetRuleContexts<EntityKeyPrimaryContext>();
		}
		public EntityKeyPrimaryContext entityKeyPrimary(int i) {
			return GetRuleContext<EntityKeyPrimaryContext>(i);
		}
		public EntityKeyReferenceContext[] entityKeyReference() {
			return GetRuleContexts<EntityKeyReferenceContext>();
		}
		public EntityKeyReferenceContext entityKeyReference(int i) {
			return GetRuleContext<EntityKeyReferenceContext>(i);
		}
		public EntityKeysBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityKeysBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityKeysBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityKeysBody(this);
		}
	}

	[RuleVersion(0)]
	public EntityKeysBodyContext entityKeysBody() {
		EntityKeysBodyContext _localctx = new EntityKeysBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_entityKeysBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PRIMARY || _la==REFERENCE) {
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 145; entityKeyPrimary();
					}
					break;
				case REFERENCE:
					{
					State = 146; entityKeyReference();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityKeyPrimaryContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(KayleeParser.PRIMARY, 0); }
		public ITerminalNode ASSIGN() { return GetToken(KayleeParser.ASSIGN, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public EntityKeyPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityKeyPrimary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityKeyPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityKeyPrimary(this);
		}
	}

	[RuleVersion(0)]
	public EntityKeyPrimaryContext entityKeyPrimary() {
		EntityKeyPrimaryContext _localctx = new EntityKeyPrimaryContext(Context, State);
		EnterRule(_localctx, 32, RULE_entityKeyPrimary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(PRIMARY);
			State = 153; Match(ASSIGN);
			State = 154; identifierList();
			State = 155; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityKeyReferenceContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(KayleeParser.REFERENCE, 0); }
		public ITerminalNode[] OPEN_PAR() { return GetTokens(KayleeParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(KayleeParser.OPEN_PAR, i);
		}
		public IdentifierListContext[] identifierList() {
			return GetRuleContexts<IdentifierListContext>();
		}
		public IdentifierListContext identifierList(int i) {
			return GetRuleContext<IdentifierListContext>(i);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(KayleeParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(KayleeParser.CLOSE_PAR, i);
		}
		public ITerminalNode ARROW() { return GetToken(KayleeParser.ARROW, 0); }
		public QualifiedContext qualified() {
			return GetRuleContext<QualifiedContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public EntityKeyReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityKeyReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterEntityKeyReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitEntityKeyReference(this);
		}
	}

	[RuleVersion(0)]
	public EntityKeyReferenceContext entityKeyReference() {
		EntityKeyReferenceContext _localctx = new EntityKeyReferenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_entityKeyReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(REFERENCE);
			State = 158; Match(OPEN_PAR);
			State = 159; identifierList();
			State = 160; Match(CLOSE_PAR);
			State = 161; Match(ARROW);
			State = 162; qualified();
			State = 163; Match(OPEN_PAR);
			State = 164; identifierList();
			State = 165; Match(CLOSE_PAR);
			State = 166; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationsContext : ParserRuleContext {
		public ITerminalNode MUTATIONS() { return GetToken(KayleeParser.MUTATIONS, 0); }
		public ITerminalNode OPEN_BLOCK() { return GetToken(KayleeParser.OPEN_BLOCK, 0); }
		public MutationsBodyContext mutationsBody() {
			return GetRuleContext<MutationsBodyContext>(0);
		}
		public ITerminalNode CLOSE_BLOCK() { return GetToken(KayleeParser.CLOSE_BLOCK, 0); }
		public MutationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutations(this);
		}
	}

	[RuleVersion(0)]
	public MutationsContext mutations() {
		MutationsContext _localctx = new MutationsContext(Context, State);
		EnterRule(_localctx, 36, RULE_mutations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(MUTATIONS);
			State = 169; Match(OPEN_BLOCK);
			State = 170; mutationsBody();
			State = 171; Match(CLOSE_BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationsBodyContext : ParserRuleContext {
		public MutationContext[] mutation() {
			return GetRuleContexts<MutationContext>();
		}
		public MutationContext mutation(int i) {
			return GetRuleContext<MutationContext>(i);
		}
		public MutationsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutationsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutationsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutationsBody(this);
		}
	}

	[RuleVersion(0)]
	public MutationsBodyContext mutationsBody() {
		MutationsBodyContext _localctx = new MutationsBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_mutationsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 173; mutation();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MutationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KayleeParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KayleeParser.OPEN_PAR, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KayleeParser.CLOSE_PAR, 0); }
		public ITerminalNode SCOL() { return GetToken(KayleeParser.SCOL, 0); }
		public MutationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterMutation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitMutation(this);
		}
	}

	[RuleVersion(0)]
	public MutationContext mutation() {
		MutationContext _localctx = new MutationContext(Context, State);
		EnterRule(_localctx, 40, RULE_mutation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(IDENTIFIER);
			State = 180; Match(OPEN_PAR);
			State = 181; identifierList();
			State = 182; Match(CLOSE_PAR);
			State = 183; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KayleeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KayleeParser.IDENTIFIER, i);
		}
		public ITerminalNode SCHEMA_ACCESSOR() { return GetToken(KayleeParser.SCHEMA_ACCESSOR, 0); }
		public ITerminalNode[] DOT() { return GetTokens(KayleeParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KayleeParser.DOT, i);
		}
		public QualifiedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterQualified(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitQualified(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedContext qualified() {
		QualifiedContext _localctx = new QualifiedContext(Context, State);
		EnterRule(_localctx, 42, RULE_qualified);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 185; Match(IDENTIFIER);
				State = 186; Match(SCHEMA_ACCESSOR);
				}
				break;
			}
			State = 189; Match(IDENTIFIER);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 190; Match(DOT);
				State = 191; Match(IDENTIFIER);
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KayleeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KayleeParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KayleeParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KayleeParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 44, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(IDENTIFIER);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 198; Match(COMMA);
				State = 199; Match(IDENTIFIER);
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeContext : ParserRuleContext {
		public ITerminalNode DTYPE_BIT() { return GetToken(KayleeParser.DTYPE_BIT, 0); }
		public ITerminalNode DTYPE_TINYINT() { return GetToken(KayleeParser.DTYPE_TINYINT, 0); }
		public ITerminalNode DTYPE_INT() { return GetToken(KayleeParser.DTYPE_INT, 0); }
		public DtypeIntAutoIncrementContext dtypeIntAutoIncrement() {
			return GetRuleContext<DtypeIntAutoIncrementContext>(0);
		}
		public ITerminalNode DTYPE_CHAR() { return GetToken(KayleeParser.DTYPE_CHAR, 0); }
		public ITerminalNode DTYPE_TEXT() { return GetToken(KayleeParser.DTYPE_TEXT, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KayleeParser.OPEN_PAR, 0); }
		public DtypeTextSizeContext dtypeTextSize() {
			return GetRuleContext<DtypeTextSizeContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KayleeParser.CLOSE_PAR, 0); }
		public ITerminalNode DTYPE_GUID() { return GetToken(KayleeParser.DTYPE_GUID, 0); }
		public ITerminalNode DTYPE_DATE() { return GetToken(KayleeParser.DTYPE_DATE, 0); }
		public ITerminalNode DTYPE_ROWVERSION() { return GetToken(KayleeParser.DTYPE_ROWVERSION, 0); }
		public DtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterDtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitDtype(this);
		}
	}

	[RuleVersion(0)]
	public DtypeContext dtype() {
		DtypeContext _localctx = new DtypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_dtype);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DTYPE_BIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(DTYPE_BIT);
				}
				break;
			case DTYPE_TINYINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(DTYPE_TINYINT);
				}
				break;
			case DTYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 207; Match(DTYPE_INT);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTO) {
					{
					State = 208; dtypeIntAutoIncrement();
					}
				}

				}
				break;
			case DTYPE_CHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 211; Match(DTYPE_CHAR);
				}
				break;
			case DTYPE_TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 212; Match(DTYPE_TEXT);
				State = 213; Match(OPEN_PAR);
				State = 214; dtypeTextSize();
				State = 215; Match(CLOSE_PAR);
				}
				break;
			case DTYPE_GUID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 217; Match(DTYPE_GUID);
				}
				break;
			case DTYPE_DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 218; Match(DTYPE_DATE);
				}
				break;
			case DTYPE_ROWVERSION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 219; Match(DTYPE_ROWVERSION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeIntAutoIncrementContext : ParserRuleContext {
		public ITerminalNode AUTO() { return GetToken(KayleeParser.AUTO, 0); }
		public ITerminalNode INCREMENT() { return GetToken(KayleeParser.INCREMENT, 0); }
		public DtypeIntAutoIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtypeIntAutoIncrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterDtypeIntAutoIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitDtypeIntAutoIncrement(this);
		}
	}

	[RuleVersion(0)]
	public DtypeIntAutoIncrementContext dtypeIntAutoIncrement() {
		DtypeIntAutoIncrementContext _localctx = new DtypeIntAutoIncrementContext(Context, State);
		EnterRule(_localctx, 48, RULE_dtypeIntAutoIncrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(AUTO);
			State = 223; Match(INCREMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DtypeTextSizeContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(KayleeParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode MAX() { return GetToken(KayleeParser.MAX, 0); }
		public DtypeTextSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtypeTextSize; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.EnterDtypeTextSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKayleeParserListener typedListener = listener as IKayleeParserListener;
			if (typedListener != null) typedListener.ExitDtypeTextSize(this);
		}
	}

	[RuleVersion(0)]
	public DtypeTextSizeContext dtypeTextSize() {
		DtypeTextSizeContext _localctx = new DtypeTextSizeContext(Context, State);
		EnterRule(_localctx, 50, RULE_dtypeTextSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==MAX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\xE6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x39', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '<', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\a', '\x5', 'J', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'M', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 'Y', '\n', '\a', '\f', '\a', '\xE', '\a', '\\', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\a', '\t', '\x64', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'g', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'k', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', 's', '\n', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'w', '\n', '\v', '\f', '\v', '\xE', '\v', 'z', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x8D', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x96', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x99', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\a', '\x15', '\xB1', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xB4', '\v', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xBE', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xC3', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\xC6', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\xCB', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\xCE', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xD4', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xDF', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', 
		'\x3', '\x4', '\x2', '\a', '\a', '\x1F', '\x1F', '\x2', '\xE7', '\x2', 
		':', '\x3', '\x2', '\x2', '\x2', '\x4', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x42', '\x3', '\x2', '\x2', '\x2', '\b', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'N', '\x3', '\x2', '\x2', '\x2', '\f', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\xE', ']', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'h', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x16', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x80', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x97', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '$', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xAA', '\x3', '\x2', '\x2', '\x2', '(', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xB5', '\x3', '\x2', '\x2', '\x2', ',', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\x32', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x5', 
		'\x6', '\x4', '\x2', '\x37', '\x39', '\x5', '\x4', '\x3', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x2', 
		'\x2', '\x3', '>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', 
		'\x32', '\x2', '\x2', '@', '\x41', '\b', '\x3', '\x1', '\x2', '\x41', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\x14', '\x2', 
		'\x2', '\x43', '\x44', '\a', '.', '\x2', '\x2', '\x44', '\x45', '\a', 
		'&', '\x2', '\x2', '\x45', '\x46', '\x5', '\b', '\x5', '\x2', '\x46', 
		'G', '\a', '\'', '\x2', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 
		'H', 'J', '\x5', '\n', '\x6', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x15', '\x2', 
		'\x2', 'O', 'P', '\a', '.', '\x2', '\x2', 'P', 'Q', '\a', '&', '\x2', 
		'\x2', 'Q', 'R', '\x5', '\f', '\a', '\x2', 'R', 'S', '\a', '\'', '\x2', 
		'\x2', 'S', '\v', '\x3', '\x2', '\x2', '\x2', 'T', 'Y', '\x5', '\xE', 
		'\b', '\x2', 'U', 'Y', '\x5', '\x1E', '\x10', '\x2', 'V', 'Y', '\x5', 
		'&', '\x14', '\x2', 'W', 'Y', '\x5', '\n', '\x6', '\x2', 'X', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x16', '\x2', 
		'\x2', '^', '_', '\a', '&', '\x2', '\x2', '_', '`', '\x5', '\x10', '\t', 
		'\x2', '`', '\x61', '\a', '\'', '\x2', '\x2', '\x61', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\x12', '\n', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x11', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'j', '\a', '.', '\x2', '\x2', 'i', 'k', '\a', 
		'+', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'r', '\x5', 
		'\x30', '\x19', '\x2', 'm', 'n', '\a', '&', '\x2', '\x2', 'n', 'o', '\x5', 
		'\x14', '\v', '\x2', 'o', 'p', '\a', '\'', '\x2', '\x2', 'p', 's', '\x3', 
		'\x2', '\x2', '\x2', 'q', 's', '\a', '\"', '\x2', '\x2', 'r', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 't', 'w', '\x5', '\x16', '\f', '\x2', 'u', 
		'w', '\x5', '\x1A', '\xE', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 
		'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x15', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\a', '\x19', '\x2', '\x2', '|', '}', '\a', ')', '\x2', 
		'\x2', '}', '~', '\x5', '\x18', '\r', '\x2', '~', '\x7F', '\a', '\"', 
		'\x2', '\x2', '\x7F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\a', '\x5', '\x2', '\x2', '\x81', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x1A', '\x2', '\x2', '\x83', '\x84', '\a', ')', 
		'\x2', '\x2', '\x84', '\x85', '\x5', '\x1C', '\xF', '\x2', '\x85', '\x86', 
		'\a', '\"', '\x2', '\x2', '\x86', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x8D', '\a', '\x3', '\x2', '\x2', '\x88', '\x8D', '\a', '\x4', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\x13', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', '$', '\x2', '\x2', '\x8B', '\x8D', '\a', '%', '\x2', '\x2', '\x8C', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x17', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '&', '\x2', '\x2', '\x90', '\x91', '\x5', ' ', '\x11', '\x2', 
		'\x91', '\x92', '\a', '\'', '\x2', '\x2', '\x92', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x96', '\x5', '\"', '\x12', '\x2', '\x94', '\x96', 
		'\x5', '$', '\x13', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '!', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x1B', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', ')', '\x2', '\x2', '\x9C', '\x9D', '\x5', 
		'.', '\x18', '\x2', '\x9D', '\x9E', '\a', '\"', '\x2', '\x2', '\x9E', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x1C', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '$', '\x2', '\x2', '\xA1', '\xA2', '\x5', 
		'.', '\x18', '\x2', '\xA2', '\xA3', '\a', '%', '\x2', '\x2', '\xA3', '\xA4', 
		'\a', '-', '\x2', '\x2', '\xA4', '\xA5', '\x5', ',', '\x17', '\x2', '\xA5', 
		'\xA6', '\a', '$', '\x2', '\x2', '\xA6', '\xA7', '\x5', '.', '\x18', '\x2', 
		'\xA7', '\xA8', '\a', '%', '\x2', '\x2', '\xA8', '\xA9', '\a', '\"', '\x2', 
		'\x2', '\xA9', '%', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'\x18', '\x2', '\x2', '\xAB', '\xAC', '\a', '&', '\x2', '\x2', '\xAC', 
		'\xAD', '\x5', '(', '\x15', '\x2', '\xAD', '\xAE', '\a', '\'', '\x2', 
		'\x2', '\xAE', '\'', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', 
		'*', '\x16', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '.', '\x2', '\x2', '\xB6', '\xB7', '\a', '$', '\x2', '\x2', 
		'\xB7', '\xB8', '\x5', '.', '\x18', '\x2', '\xB8', '\xB9', '\a', '%', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '\"', '\x2', '\x2', '\xBA', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '.', '\x2', '\x2', '\xBC', 
		'\xBE', '\a', ',', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC4', '\a', '.', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '#', '\x2', '\x2', '\xC1', '\xC3', '\a', '.', '\x2', '\x2', 
		'\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '-', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCC', '\a', '.', '\x2', 
		'\x2', '\xC8', '\xC9', '\a', '(', '\x2', '\x2', '\xC9', '\xCB', '\a', 
		'.', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xDF', '\a', '\v', '\x2', '\x2', '\xD0', '\xDF', '\a', '\f', '\x2', '\x2', 
		'\xD1', '\xD3', '\a', '\r', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x32', 
		'\x1A', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xDF', '\a', '\xE', '\x2', '\x2', '\xD6', '\xD7', '\a', '\xF', 
		'\x2', '\x2', '\xD7', '\xD8', '\a', '$', '\x2', '\x2', '\xD8', '\xD9', 
		'\x5', '\x34', '\x1B', '\x2', '\xD9', '\xDA', '\a', '%', '\x2', '\x2', 
		'\xDA', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDF', '\a', '\x10', 
		'\x2', '\x2', '\xDC', '\xDF', '\a', '\x11', '\x2', '\x2', '\xDD', '\xDF', 
		'\a', '\x12', '\x2', '\x2', '\xDE', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\a', '\x1D', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x1E', '\x2', '\x2', 
		'\xE2', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\t', '\x2', 
		'\x2', '\x2', '\xE4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x15', '\x38', 
		':', 'K', 'X', 'Z', '\x65', 'j', 'r', 'v', 'x', '\x8C', '\x95', '\x97', 
		'\xB2', '\xBD', '\xC4', '\xCC', '\xD3', '\xDE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
